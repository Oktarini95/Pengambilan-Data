import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Membaca data dari file CSV
file_path = '/content/stemming_exploded.csv'  # Ganti dengan path file Anda
data = pd.read_csv(file_path)
df = pd.DataFrame(data)

# Langkah 1: Mengubah teks menjadi representasi Bag of Words menggunakan CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['Content'])

# Langkah 2: Menyiapkan label aspek (multi-class)
y_aspect = df['Aspect']

# Langkah 3: Seleksi fitur menggunakan Chi-Square (80% fitur terbaik)
num_features = int(X.shape[1] * 0.8)  # Mengambil 80% fitur terbaik
chi2_selector = SelectKBest(chi2, k=num_features)
X_selected = chi2_selector.fit_transform(X, y_aspect)

# Langkah 4: Membagi data menjadi data latih dan data uji (80% latih, 20% uji)
X_train, X_test, y_train_aspect, y_test_aspect = train_test_split(X_selected, y_aspect, test_size=0.2, random_state=42)

# Langkah 5: Melatih model Naive Bayes untuk klasifikasi aspek (multi-class)
nb_aspect = MultinomialNB()
nb_aspect.fit(X_train, y_train_aspect)

# Langkah 6: Memprediksi data uji untuk aspek
y_pred_aspect = nb_aspect.predict(X_test)

# Evaluasi model Naive Bayes untuk aspek
print("\nEvaluasi Model Naive Bayes untuk Aspek:")
print("Confusion Matrix:")
conf_matrix_aspect = confusion_matrix(y_test_aspect, y_pred_aspect, labels=nb_aspect.classes_)
print(conf_matrix_aspect)
print("\nClassification Report:")
print(classification_report(y_test_aspect, y_pred_aspect))
print("\nAccuracy:")
print(accuracy_score(y_test_aspect, y_pred_aspect))

# Langkah 7: Hitung akurasi untuk setiap kelas
class_accuracies = {}
for i, label in enumerate(nb_aspect.classes_):
    TP = conf_matrix_aspect[i, i]  # True Positives
    total_class = conf_matrix_aspect[i, :].sum()  # Total instances of this class
    class_accuracy = TP / total_class if total_class != 0 else 0
    class_accuracies[label] = class_accuracy

# Tampilkan akurasi per kelas
print("\nAkurasi Per Kelas:")
for label, accuracy in class_accuracies.items():
    print(f"{label}: {accuracy:.2f}")

# Visualisasi confusion matrix untuk aspek
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix_aspect, annot=True, fmt='d', cmap='Blues', xticklabels=nb_aspect.classes_, yticklabels=nb_aspect.classes_)
plt.xlabel('Prediksi')
plt.ylabel('Aktual')
plt.title('Confusion Matrix untuk Aspek')
plt.show()
